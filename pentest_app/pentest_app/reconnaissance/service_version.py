import subprocess
from scapy.all import IP, TCP, sr1, send
import socket

ftp_dict = [
    ("admin", "admin"),
    ("user", "password"),
    ("test", "123456"),
    ("ftp", "ftp"),
    ("root", "toor"),
    ("kamtchuing", "projet"),
]

def ftp_anonymous_access(target, port=21, progress_callback=None):
    def log(msg):
        if progress_callback:
            progress_callback(msg)
        else:
            print(msg)
    log(f"Tentative d'accès anonyme FTP sur {target}:{port}...")
    try:
        import ftplib
        ftp = ftplib.FTP()
        ftp.connect(target, port, timeout=5)
        ftp.login()
        log("Connexion anonyme réussie ! Fichiers présents sur le serveur FTP:")
        for f in ftp.nlst():
            log(f)
        ftp.quit()
    except Exception as e:
        log(f"Accès anonyme impossible: {e}")

def brute_force_ftp(target, port=21, dict_list=ftp_dict, progress_callback=None):
    def log(msg):
        if progress_callback:
            progress_callback(msg)
        else:
            print(msg)
    log(f"Lancement de l'attaque brute force FTP sur {target}:{port}...")
    for username, password in dict_list:
        cmd = ["hydra", "-l", username, "-p", password, target, "ftp", "-s", str(port)]
        log(f"Test avec {username}:{password}")
        try:
            result = subprocess.run(cmd, capture_output=True, text=True)
            log(result.stdout)
            if "login:" in result.stdout:
                log(f"Succès: {username}:{password}")
                return True
        except Exception as e:
            log(f"Erreur Hydra: {e}")
    log("Aucun identifiant valide n'a pu être trouvé pour le FTP.")
    return False

def detect_service_version(target, port=None, use_nmap=False, progress_callback=None):
    def log(msg):
        if progress_callback:
            progress_callback(msg)
        else:
            print(msg)
    if use_nmap:
        if port:
            log(f"Détection du service/version avec nmap sur {target}:{port}")
            try:
                result = subprocess.run(["nmap", "-sV", "-p", str(port), target], capture_output=True, text=True)
                for line in result.stdout.splitlines():
                    log(line)
            except Exception as e:
                log(f"Erreur lors de l'exécution de nmap : {e}")
        else:
            log(f"Liste des services disponibles avec nmap sur {target}")
            try:
                result = subprocess.run(["nmap", "-sV", "-p-", target], capture_output=True, text=True)
                for line in result.stdout.splitlines():
                    log(line)
            except Exception as e:
                log(f"Erreur lors de l'exécution de nmap : {e}")
    else:
        if port:
            log(f"Détection du service/version sur {target}:{port} avec scapy")
            try:
                pkt = IP(dst=target)/TCP(dport=port, flags="S")
                resp = sr1(pkt, timeout=2, verbose=0)
                if resp and resp.haslayer(TCP) and resp[TCP].flags == 0x12:
                    ack_pkt = IP(dst=target)/TCP(dport=port, sport=resp[TCP].dport, flags="A", seq=resp[TCP].ack, ack=resp[TCP].seq+1)
                    send(ack_pkt, verbose=0)
                    try:
                        s = socket.socket()
                        s.settimeout(2)
                        s.connect((target, port))
                        s.send(b'\r\n')
                        banner = s.recv(1024)
                        log(f"Port {port} ouvert - Bannière: {banner.decode(errors='ignore')}")
                        s.close()
                    except Exception as e:
                        log(f"Impossible de récupérer la bannière: {e}")
                else:
                    log(f"Port {port} fermé ou filtré, impossible de détecter le service.")
            except Exception as e:
                log(f"Erreur lors de la détection: {e}")
        else:
            log(f"Scan de tous les ports (1-65535) sur {target} avec scapy")
            for port in range(1, 65536):
                pkt = IP(dst=target)/TCP(dport=port, flags="S")
                resp = sr1(pkt, timeout=0.5, verbose=0)
                if resp and resp.haslayer(TCP) and resp[TCP].flags == 0x12:
                    log(f"Port {port} ouvert")
                    try:
                        s = socket.socket()
                        s.settimeout(1)
                        s.connect((target, port))
                        s.send(b'\r\n')
                        banner = s.recv(1024)
                        log(f"Bannière: {banner.decode(errors='ignore')}")
                        s.close()
                    except Exception as e:
                        log(f"Impossible de récupérer la bannière sur le port {port}: {e}")
            log("Scan terminé.")
