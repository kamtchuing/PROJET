# Détection de failles sur un hôte
import socket
import subprocess
import os
from scapy.all import *
import requests

DEFAULT_NESSUS_URL = "https://localhost:8834"

# Fonction pour lancer un scan Nessus via l'API
def scan_nessus_api(target, log=print):
    url = os.environ.get("NESSUS_URL", DEFAULT_NESSUS_URL)
    access = os.environ.get("NESSUS_ACCESS_KEY")
    secret = os.environ.get("NESSUS_SECRET_KEY")
    if not access or not secret:
        log("Clés Nessus non configurées. Définissez NESSUS_ACCESS_KEY et NESSUS_SECRET_KEY pour activer ce test.")
        return
    headers = {
        "X-ApiKeys": f"accessKey={access}; secretKey={secret}",
        "Content-Type": "application/json"
    }
    # Création d'un scan basique (template: basic)
    data = {
        "uuid": "adf1bc2e-9b2b-4c7e-8e2d-1a1e2e2e2e2e", # UUID du template (à adapter selon installation)
        "settings": {
            "name": f"Scan_{target}",
            "text_targets": target
        }
    }
    try:
        r = requests.post(f"{url}/scans", headers=headers, json=data, verify=False)
        scan_id = r.json().get("scan", {}).get("id")
        if not scan_id:
            log("Erreur lors de la création du scan Nessus.")
            return
        log(f"Scan Nessus lancé (ID: {scan_id}) sur {target}. Veuillez vérifier l'interface Nessus pour les résultats.")
    except Exception as e:
        log(f"Erreur API Nessus: {e}")

def detect_failles(target, outil="scapy", progress_callback=None):
    def log(msg):
        if progress_callback:
            progress_callback(msg)
        else:
            print(msg)
    log(f"Détection de failles sur {target} avec l'outil : {outil}")
    vuln_ports = {
        21: "FTP (souvent vulnérable si version obsolète)",
        23: "Telnet (non sécurisé)",
        80: "HTTP (vulnérabilités fréquentes)",
        443: "HTTPS (vérifier la version SSL/TLS)",
        445: "SMB (vulnérabilités connues)",
        22: "SSH (vérifier la version et les CVE)",
    }
    if outil == "scapy":
        for port, desc in vuln_ports.items():
            try:
                s = socket.socket()
                s.settimeout(1)
                s.connect((target, port))
                log(f"Port {port} ouvert: {desc}")
                if port == 22:
                    s.send(b'\n')
                    banner = s.recv(1024)
                    log(f"Bannière SSH: {banner.decode(errors='ignore')}")
                s.close()
            except Exception:
                pass
        log("Analyse basique terminée. Pour une analyse avancée, intégrer une base CVE ou utiliser un outil comme Nessus ou Nikto.")
    elif outil == "nikto":
        log("Scan HTTP avec Nikto...")
        try:
            result = subprocess.run(["nikto", "-h", target], capture_output=True, text=True)
            log(result.stdout)
        except Exception as e:
            log(f"Erreur lors de l'exécution de Nikto : {e}")
    elif outil == "nessus":
        log("Scan Nessus via API...")
        scan_nessus_api(target, log=log)
    else:
        log("Outil non reconnu. Utilisez 'scapy', 'nikto' ou 'nessus'.")
