# Détection de ports/services non sécurisés
import socket
import subprocess
from scapy.all import *
import requests

NESSUS_URL = "https://localhost:8834"
ACCESS_KEY = "28625fb38cef0bf08998a0760ed01496fe9b5b4ee2a83dcf9c67218976e34c3b"
SECRET_KEY = "c7470953bb613ad31149f56beef1ad0f51e7941b714f3049ef76c9c2aeb40740"

def detect_ports_non_securises(target, outil="scapy"):
    print(f"Détection de ports/services non sécurisés sur {target} avec l'outil : {outil}")
    # Liste de ports considérés comme non sécurisés
    non_secure_ports = {
        21: "FTP (non sécurisé)",
        23: "Telnet (non sécurisé)",
        80: "HTTP (non sécurisé sans HTTPS)",
        445: "SMB (vulnérable à de nombreux exploits)",
        139: "NetBIOS (souvent exposé)",
        3389: "RDP (souvent cible d'attaques)",
    }
    if outil == "scapy":
        for port, desc in non_secure_ports.items():
            try:
                s = socket.socket()
                s.settimeout(1)
                s.connect((target, port))
                print(f"Port {port} ouvert: {desc}")
                s.close()
            except Exception:
                pass
        print("Analyse terminée. Pensez à désactiver les services inutiles ou à les sécuriser.")
    elif outil == "nikto":
        print("Scan HTTP avec Nikto...")
        try:
            result = subprocess.run(["nikto", "-h", target], capture_output=True, text=True)
            print(result.stdout)
        except Exception as e:
            print(f"Erreur lors de l'exécution de Nikto : {e}")
    elif outil == "nessus":
        print("Scan Nessus via API...")
        scan_nessus_api(target)
    else:
        print("Outil non reconnu. Utilisez 'scapy', 'nikto' ou 'nessus'.")

def scan_nessus_api(target):
    headers = {
        "X-ApiKeys": f"accessKey={ACCESS_KEY}; secretKey={SECRET_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "uuid": "adf1bc2e-9b2b-4c7e-8e2d-1a1e2e2e2e2e", # UUID du template (à adapter selon installation)
        "settings": {
            "name": f"Scan_{target}",
            "text_targets": target
        }
    }
    try:
        r = requests.post(f"{NESSUS_URL}/scans", headers=headers, json=data, verify=False)
        scan_id = r.json().get("scan", {}).get("id")
        if not scan_id:
            print("Erreur lors de la création du scan Nessus.")
            return
        print(f"Scan Nessus lancé (ID: {scan_id}) sur {target}. Veuillez vérifier l'interface Nessus pour les résultats.")
    except Exception as e:
        print(f"Erreur API Nessus: {e}")
