import sys

from pentest_app.reconnaissance import scan_port, scan_icmp, service_version
from pentest_app.bruteforce import permutation, dictionnaire
from pentest_app.vulnerabilite import detection_failles, detection_port, service_obsolete
from pentest_app.postexploitation import analyse_reseau, dump_session, exploration_reseau
from pentest_app.evasion import bypass_firewall, antivirus_evasion, IDS_evasion

def menu():
    print("""
==== Outil de Test de Pénétration ====
1. Test de reconnaissance réseau
2. Test de brute force d'authentification
3. Test de vulnérabilité système
4. Test de post exploitation
5. Test d'évasion et contournement
0. Quitter
""")
    return input("Choisissez le type d'attaque: ")

def reconnaissance_menu():
    print("""
-- Reconnaissance réseau --
1. Scan de port
2. Scan ICMP
3. Détection de service et version
0. Retour
""")
    return input("Choisissez le sous-type: ")

def bruteforce_menu():
    print("""
-- Brute force d'authentification --
1. Attaque par permutation
2. Attaque par dictionnaire
0. Retour
""")
    return input("Choisissez le sous-type: ")

def vulnerabilite_menu():
    print("""
-- Test de vulnérabilité système --
1. Détection de failles (CVE/services vulnérables)
2. Détection de ports/services non sécurisés
3. Détection de services obsolètes
0. Retour
""")
    return input("Choisissez le sous-type: ")

def postexploitation_menu():
    print("""
-- Test de post exploitation --
1. Analyse du réseau interne
2. Dump de session
3. Exploration du réseau interne
0. Retour
""")
    return input("Choisissez le sous-type: ")

def evasion_menu():
    print("""
-- Test d'évasion et contournement --
1. Contournement de pare-feu
2. Évasion antivirus
3. Évasion IDS
0. Retour
""")
    return input("Choisissez le sous-type: ")

def main():
    while True:
        choix = menu()
        if choix == '1':
            sous_choix = reconnaissance_menu()
            if sous_choix == '1':
                target = input("Cible IP: ")
                ports = input("Ports (ex: 22,80,443): ")
                ports = [int(p.strip()) for p in ports.split(',')]
                print("Choisissez l'outil pour le scan de port :")
                print("1. Scapy")
                print("2. Nmap")
                outil = input("Votre choix (1/2) : ")
                use_nmap = outil == '2'
                result = scan_port.scan_ports(target, ports, use_nmap=use_nmap)
                print(result)
            elif sous_choix == '2':
                target = input("Cible IP: ")
                print("Choisissez l'outil pour le scan ICMP :")
                print("1. Scapy")
                print("2. Nmap")
                outil = input("Votre choix (1/2) : ")
                if outil == '2':
                    import subprocess
                    try:
                        result = subprocess.run(["nmap", "-sn", target], capture_output=True, text=True)
                        print(result.stdout)
                    except Exception as e:
                        print(f"Erreur lors de l'exécution de nmap : {e}")
                else:
                    result = scan_icmp.scan_icmp(target)
                    print(result)
            elif sous_choix == '3':
                target = input("Cible IP: ")
                print("Voulez-vous lister tous les services ouverts ou cibler un port précis ?")
                print("1. Lister tous les services")
                print("2. Cibler un port précis")
                mode = input("Votre choix (1/2) : ")
                print("Choisissez l'outil pour la détection de service/version :")
                print("1. Scapy")
                print("2. Nmap")
                outil = input("Votre choix (1/2) : ")
                use_nmap = outil == '2'
                if mode == '1':
                    result = service_version.detect_service_version(target, port=None, use_nmap=use_nmap)
                    print(result)
                else:
                    port = int(input("Port à cibler : "))
                    result = service_version.detect_service_version(target, port=port, use_nmap=use_nmap)
                    print(result)
        elif choix == '2':
            sous_choix = bruteforce_menu()
            if sous_choix == '1':
                target = input("Cible IP: ")
                username = input("Nom d'utilisateur: ")
                print("Choisissez l'outil pour l'attaque par permutation :")
                print("1. Scapy (Python)")
                print("2. Hydra")
                outil = input("Votre choix (1/2) : ")
                use_hydra = outil == '2'
                result = permutation.brute_force_permutation(target, username, use_hydra=use_hydra)
                print(result)
            elif sous_choix == '2':
                target = input("Cible IP: ")
                username = input("Nom d'utilisateur: ")
                port = input("Port SSH (défaut 22): ")
                port = int(port) if port else 22
                print("Choisissez le dictionnaire à utiliser :")
                print("1. Dictionnaire par défaut de Kali (/usr/share/wordlists/rockyou.txt)")
                print("2. Dictionnaire en ligne (à spécifier)")
                dict_choice = input("Votre choix (1/2) : ")
                if dict_choice == '1':
                    wordlist = "/usr/share/wordlists/rockyou.txt"
                else:
                    wordlist = input("Chemin ou URL du dictionnaire : ")
                print("Choisissez l'outil pour l'attaque par dictionnaire :")
                print("1. Scapy (Python)")
                print("2. Hydra")
                outil = input("Votre choix (1/2) : ")
                use_hydra = outil == '2'
                result = dictionnaire.brute_force_dictionnaire(target, username, wordlist, use_hydra=use_hydra, port=port)
                print(result)
        elif choix == '3':
            sous_choix = vulnerabilite_menu()
            if sous_choix == '1':
                target = input("Cible IP: ")
                print("Choisissez l'outil pour la détection de failles :")
                print("1. Scapy (Python)")
                print("2. Nikto")
                print("3. Nessus")
                outil = input("Votre choix (1/2/3) : ")
                if outil == '1':
                    result = detection_failles.detect_failles(target, outil="scapy")
                    print(result)
                elif outil == '2':
                    result = detection_failles.detect_failles(target, outil="nikto")
                    print(result)
                elif outil == '3':
                    result = detection_failles.detect_failles(target, outil="nessus")
                    print(result)
                else:
                    print("Outil non reconnu.")
            elif sous_choix == '2':
                target = input("Cible IP: ")
                print("Choisissez l'outil pour la détection de ports/services non sécurisés :")
                print("1. Scapy (Python)")
                print("2. Nikto")
                print("3. Nessus")
                outil = input("Votre choix (1/2/3) : ")
                if outil == '1':
                    result = detection_port.detect_ports_non_securises(target, outil="scapy")
                    print(result)
                elif outil == '2':
                    result = detection_port.detect_ports_non_securises(target, outil="nikto")
                    print(result)
                elif outil == '3':
                    result = detection_port.detect_ports_non_securises(target, outil="nessus")
                    print(result)
                else:
                    print("Outil non reconnu.")
            elif sous_choix == '3':
                target = input("Cible IP: ")
                print("Choisissez l'outil pour la détection de services obsolètes :")
                print("1. Scapy (Python)")
                print("2. Nikto")
                print("3. Nessus")
                outil = input("Votre choix (1/2/3) : ")
                if outil == '1':
                    result = service_obsolete.detect_services_obsoletes(target, outil="scapy")
                    print(result)
                elif outil == '2':
                    result = service_obsolete.detect_services_obsoletes(target, outil="nikto")
                    print(result)
                elif outil == '3':
                    result = service_obsolete.detect_services_obsoletes(target, outil="nessus")
                    print(result)
                else:
                    print("Outil non reconnu.")
        elif choix == '4':
            sous_choix = postexploitation_menu()
            if sous_choix == '1':
                subnet = input("Plage réseau à analyser (ex: 192.168.1.0/24): ")
                result = analyse_reseau.analyse_reseau_interne(subnet)
                print(result)
            elif sous_choix == '2':
                result = dump_session.dump_sessions()
                print(result)
            elif sous_choix == '3':
                subnet = input("Plage réseau à explorer (ex: 192.168.1.0): ")
                result = exploration_reseau.exploration_reseau_interne(subnet)
                print(result)
        elif choix == '5':
            sous_choix = evasion_menu()
            if sous_choix == '1':
                target = input("Cible IP: ")
                result = bypass_firewall.bypass_firewall(target)
                print(result)
            elif sous_choix == '2':
                result = antivirus_evasion.antivirus_evasion()
                print(result)
            elif sous_choix == '3':
                target = input("Cible IP: ")
                result = IDS_evasion.IDS_evasion(target)
                print(result)
        elif choix == '0':
            print("Au revoir!")
            sys.exit(0)
        else:
            print("Choix invalide.")

if __name__ == "__main__":
    main()
