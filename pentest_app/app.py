from flask import Flask, render_template, request
from pentest_app.reconnaissance import scan_port, scan_icmp, service_version
from pentest_app.bruteforce import permutation, dictionnaire
from pentest_app.vulnerabilite import detection_failles, detection_port, service_obsolete
from pentest_app.postexploitation import analyse_reseau, dump_session, exploration_reseau
from pentest_app.evasion import bypass_firewall, antivirus_evasion, IDS_evasion

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/reconnaissance', methods=['GET', 'POST'])
def reconnaissance():
    result = None
    if request.method == 'POST':
        sous_choix = request.form.get('sous_choix')
        target = request.form.get('target')
        if sous_choix == 'scan_port':
            ports = request.form.get('ports')
            ports = [int(p.strip()) for p in ports.split(',')]
            use_nmap = request.form.get('outil') == 'nmap'
            result = scan_port.scan_ports(target, ports, use_nmap=use_nmap)
        elif sous_choix == 'scan_icmp':
            use_nmap = request.form.get('outil') == 'nmap'
            if use_nmap:
                import subprocess
                try:
                    res = subprocess.run(["nmap", "-sn", target], capture_output=True, text=True)
                    result = res.stdout
                except Exception as e:
                    result = f"Erreur lors de l'ex√©cution de nmap : {e}"
            else:
                result = scan_icmp.scan_icmp(target)
        elif sous_choix == 'service_version':
            mode = request.form.get('mode')
            use_nmap = request.form.get('outil') == 'nmap'
            if mode == 'all':
                result = service_version.detect_service_version(target, port=None, use_nmap=use_nmap)
            else:
                port = int(request.form.get('port'))
                result = service_version.detect_service_version(target, port=port, use_nmap=use_nmap)
    return render_template('reconnaissance.html', result=result)

# Ajoute les autres routes ici (bruteforce, vulnerabilite, etc.)

if __name__ == '__main__':
    app.run(debug=True)
